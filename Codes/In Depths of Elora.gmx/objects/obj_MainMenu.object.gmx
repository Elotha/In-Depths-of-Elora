<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>1</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Create

{
    scr_back_to_menu(); //Gereksiz objeleri sil
    globalvar fnt_menu, font_string, current_profile;
    fnt_menu = font_add_sprite_ext(spr_MainMenuFont,'ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789:-.,%/&lt;&gt;$!+*"',true,2);
    font = fnt_menu;
    font_string[0] = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789:-.,%/&lt;&gt;+*"';
    font_string[1] = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789';
    
    image_speed = 1/5;
    display_set_gui_size(view_wport[0]/3,view_hport[0]/3);
    start_game = false;
    alpha = 0;
    start_alpha = true;
    draw_set_alpha(1);
    
    audio_group_load(MainMenu);
    global.current_music = snd_MainMenu;
    
    selected[0] = 0.5;
    for(var i = 1; i &lt; 12; i++)
        {
        selected[i] = 0;
        }
    selected_total = 5;
    selected_number = 0;
    
    show_first = "";
    show_last = "";
    offset = 0;
    
    
    main_menu[STARTGAME] = "START GAME";
    main_menu[SETTINGS] = "SETTINGS";
    main_menu[JOURNAL] = "JOURNAL";
    main_menu[PROFILES] = "PROFILES";
    main_menu[EXIT] = "EXIT";
    
    settings[CONTROLS] = "CONTROLS";
    settings[GAMEPLAY] = "GAMEPLAY";
    settings[GRAPHICS] = "GRAPHICS";
    settings[AUDIO] = "AUDIO";
    settings[SET_BACK] = "BACK";
    
    enum controlkeys
        {
        left,
        right,
        jump,
        cameraup,
        cameradown,
        interact,
        journal,
        hud,
        music,
        sounds,
        cont_default,
        back
        }
        
    control_change = false; //Herhangi bir kontrol değiştiriliyor mu?
    control_check = false; //Atanmamış tuş var mı?
    
    hud[ALWAYS_SHOW] = "ALWAYS SHOW";
    hud[ONLY_INTERACT] = "ONLY WHEN INTERACT";
    hud[ONLY_HUDKEY] = "ONLY WHEN HOLD THE HUD KEY";
    hud[HUD_NEVER] = "NEVER";
    
    on_startup[STARTUP_MENU] = "MENU";
    on_startup[STARTUP_CONT] = "CONTINUE";
    
    dialog_speed[SPEED1] = "1";
    dialog_speed[SPEED2] = "2";
    dialog_speed[SPEED4] = "4";
    dialog_speed[SPEED8] = "8";
    
    language[ENGLISH] = "ENGLISH";
    language[TURKISH] = "TURKISH";
    
    speedrun_timer[OFF] = "OFF";
    speedrun_timer[ON] = "ON";
    
    v_sync[ON] = "ON";
    v_sync[OFF] = "OFF";
    
    fullscreen[ON] = "ON";
    fullscreen[OFF] = "OFF";
    
    resolution[R1920X1080] = "1920 X 1080";
    resolution[R1600X900] = "1600 X 900";
    
    graphics_quality[QUALITY_HIGH] = "HIGH";
    graphics_quality[QUALITY_LOW] = "LOW";
    
    global.v_sync = ON;
    game_is_started = true;
    if !scr_profile_load() //Önceden oluşturulmuş bir profil varsa yükle, yoksa aşağıdaki kodları çalıştır
        {
        global.music = true;
        global.sounds = true;
        description = "Please enter a profile name. You can only use letters and numbers. #Press &lt;Enter&gt; to create. Press &lt;ESC&gt; to return to desktop. ";
        new_profile = "";
        keyboard_string = new_profile;
        menu_current = "New Profile";
        v_sync_current = ON;
        }
    else menu_current = "Main Menu";
    //display_reset(0,v_sync_current);
    button_current = 0;
    
    scr_profile_names();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Description

{
    switch(menu_current)
        {
        case "New Profile":
            if total = 0 then description = "Please enter a profile name. You can only use letters and numbers. #Press &lt;Enter&gt; to create. Press &lt;ESC&gt; to return to desktop. ";
            else description = "Please enter a profile name. You can only use letters and numbers. #Press &lt;Enter&gt; to create. Press &lt;ESC&gt; to cancel. ";
            break;
        
        case "Controls":
            if description = "Default control settings applied." then description = "Press &lt;Enter&gt; to change key.";
            else description = "Press any key to assign, press &lt;ESC&gt; to cancel. Some keys are not allowed.";
            break;   
        }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Start

{
    if start_game //Oyuna başlama tuşuna bastık
        {
        if !audio_group_is_loaded(InGame) then audio_group_load(InGame);
        if alpha &gt; 0 then alpha -= 0.05;
        else room_goto_next();
        exit;
        }
        
    if start_alpha
        {
        if alpha &lt; 1 then alpha += 0.025; else start_alpha = false;
        }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Control Change

{
    if control_change
        {
        if keyboard_check_pressed(vk_escape)
            {
            control_change = false;
            description = "Press &lt;Enter&gt; to change key.";
            }
        else if keyboard_check_pressed(vk_anykey)
            {
            if scr_control_load(button_current,false)
                {
                control_change = false;
                description = "Press &lt;Enter&gt; to change key.";
                }
            }
        exit;
        }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Profile Name

{
    if menu_current = "New Profile"
        {
        if keyboard_check_pressed(vk_backspace)
            {
            new_profile = string_copy(new_profile,1,string_length(new_profile)-1);
            keyboard_string = new_profile;
            }
        else if keyboard_check_pressed(vk_anykey) &amp;&amp; !keyboard_check_pressed(vk_enter) &amp;&amp; !keyboard_check_pressed(vk_escape)
            {
            if string_count(string_upper(keyboard_lastchar),font_string[1]) != 0
                {
                new_profile = string_copy(string_upper(keyboard_string),1,16);
                keyboard_string = new_profile;
                }
            else keyboard_string = new_profile;
            }
        }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Down and Up

{        
    if menu_current != "New Profile"
        {
        var dir = (keyboard_check_pressed(vk_down) || keyboard_check_pressed(ord('S'))) - (keyboard_check_pressed(vk_up) || keyboard_check_pressed(ord('W')));
        if dir = -1
            {
            if selected_number = 0
                {
                selected[0] = 0;
                selected[selected_total-1] = 0.5;
                selected_number = selected_total-1;
                button_current = selected_number;
                if selected_total &gt; 5
                    {
                    offset = selected_total-5;
                    show_first = "!";
                    show_last = "";
                    }
                }
            else
                {
                selected[selected_number--] = 0;
                selected[selected_number] = 0.5;
                button_current = selected_number;
                if selected_total &gt; 5
                    {
                    if selected_number &lt; selected_total-5 then show_last = "$";
                    if offset &gt; 0 &amp;&amp; selected_number &lt; offset then offset--;
                    if offset = 0 then show_first = "";
                    }
                }
            }
        else if dir = 1
            {
            if selected_number = selected_total-1
                {
                selected[selected_total-1] = 0;
                selected[0] = 0.5;
                selected_number = 0;
                button_current = selected_number;
                if selected_total &gt; 5
                    {
                    show_first = "";
                    show_last = "$";
                    offset = 0;
                    }
                }
            else
                {
                selected[selected_number++] = 0;
                selected[selected_number] = 0.5;
                button_current = selected_number;
                if selected_total &gt; 5
                    {
                    if selected_number &gt;= 5 then show_first = "!";
                    if selected_number-offset &gt; 4 &amp;&amp; offset &lt; selected_total-4 then offset++;
                    if offset = selected_total-5 then show_last = "";
                    }
                }
            }
        if dir != 0 exit;
        }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Left and Right

{
    var left = keyboard_check_pressed(vk_left);
    var right = keyboard_check_pressed(vk_right);
    dirc = right-left;
    if keyboard_check_pressed(vk_enter) then dirc = 1;
    if dirc != 0
        {
        switch(menu_current)
            {
            case "Gameplay": 
                switch(button_current)
                    {
                    case HUD:
                        gameplay[HUD] = scr_change_button(dirc,hud,gameplay[HUD],"HUD: ","Gameplay","Hud");
                        break;
                        
                    case ONSTARTUP:
                        gameplay[ONSTARTUP] = scr_change_button(dirc,on_startup,gameplay[ONSTARTUP],"ON STARTUP: ","Gameplay","On Startup");
                        break;
                        
                    case DIALOGSPEED:
                        gameplay[DIALOGSPEED] = scr_change_button(dirc,dialog_speed,gameplay[DIALOGSPEED],"DIALOG SPEED: ","Gameplay","Dialog Speed");
                        break;
                        
                    case LANGUAGE:
                        gameplay[LANGUAGE] = scr_change_button(dirc,language,gameplay[LANGUAGE],"LANGUAGE: ","Gameplay","Language");
                        break;
                        
                    case SPEEDRUN:
                        gameplay[SPEEDRUN] = scr_change_button(dirc,speedrun_timer,gameplay[SPEEDRUN],"SPEEDRUN TIMER: ","Gameplay","Speedrun Timer");
                        break;
                    }
                break;
                    
            case "Graphics": 
                switch(button_current)
                    {
                    case V_SYNC:
                        graphics[V_SYNC] = scr_change_button(dirc,v_sync,graphics[V_SYNC],"V-SYNC: ","Graphics","V-Sync");
                        ini_open(current_profile + "_config.ini");
                        display_reset(0,ini_read_real("Graphics","V-Sync",ON));
                        ini_close();
                        break;
                        
                    case FULLSCREEN:
                        graphics[FULLSCREEN] = scr_change_button(dirc,fullscreen,graphics[FULLSCREEN],"FULLSCREEN: ","Graphics","Fullscreen");
                        ini_open(current_profile + "_config.ini");
                        window_set_fullscreen(ini_read_real("Graphics","Fullscreen","ON"));
                        ini_close();
                        break;
                        
                    case RESOLUTION:
                        graphics[RESOLUTION] = scr_change_button(dirc,resolution,graphics[RESOLUTION],"RESOLUTION: ","Graphics","Resolution");
                        break;
                        
                    case GRAP_QUALITY:
                        graphics[GRAP_QUALITY] = scr_change_button(dirc,graphics_quality,graphics[GRAP_QUALITY],"GRAPHICS QUALITY: ","Graphics","Quality");
                        break;
                    }
                break;
                
            case "Audio":
                ini_open(string_lower(current_profile) +"_config.ini");
                if !keyboard_check_pressed(vk_enter) then switch(button_current)
                    {
                    case MASTER_VOLUME:
                        if global.master_volume = 0 &amp;&amp; dirc = 1
                            {
                            global.master_volume = 1;
                            scr_music();
                            }
                        else if global.master_volume = 1 &amp;&amp; dirc = -1
                            {
                            global.master_volume = 0;
                            scr_music();
                            global.master_volume_last = 10;
                            }
                        else global.master_volume = clamp(global.master_volume+(1*dirc),0,10);    
                        ini_write_real("Audio","Master",global.master_volume);
                        scr_volumes("Master");
                        break;
                        
                    case MUSIC_VOLUME:
                        if global.music_volume = 0 &amp;&amp; dirc = 1
                            {
                            global.music_volume = 1;
                            scr_music();
                            }
                        else if global.music_volume = 1 &amp;&amp; dirc = -1
                            {
                            global.music_volume = 0;
                            scr_music();
                            global.music_volume_last = 10;
                            }
                        else global.music_volume = clamp(global.music_volume+(1*dirc),0,10);
                        ini_write_real("Audio","Music",global.music_volume);
                        scr_volumes("Music");
                        break;
                        
                    case SOUNDS_VOLUME:
                        if global.sounds_volume = 1 &amp;&amp; dirc = -1
                            {
                            global.sounds_volume = 0
                            global.music_volume_last = 10;
                            }
                        else global.sounds_volume = clamp(global.sounds_volume+(1*dirc),0,10);
                        ini_write_real("Audio","Sounds",global.sounds_volume);
                        scr_volumes("Sounds");
                        break;
                        
                    }
                ini_close();
                break;
            
            case "Profiles":
                switch(button_current)
                    {
                    case CURRENT_PROFILE:
                        if total &gt; 1
                            {
                            profiles[CURRENT_PROFILE] = scr_change_button(dirc,profile,profiles[CURRENT_PROFILE],"CURRENT PROFILE: ","Profiles","Current Number");
                            scr_profile_load();
                            delete_profile[0] = "YES, DELETE THIS PROFILE: " + current_profile;
                            break;
                            }
                    }
                break;
            }
        if !keyboard_check_pressed(vk_enter) then exit;
        }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Enter

{
    if keyboard_check_pressed(vk_enter) //Enter'a Basılırsa
        {
        switch(menu_current)
            {
            case "New Profile":
                if new_profile != ""
                    {
                    scr_profile_new();
                    }
                break;
                
            case "Main Menu":
                switch(button_current)
                    {
                    case STARTGAME:
                        start_game = true;
                        break;
                        
                    case SETTINGS:
                        menu_current = "Settings";
                        scr_change_menu(settings,0);
                        break;
                        
                    case JOURNAL:
                        break;
                        
                    case PROFILES:
                        menu_current = "Profiles";
                        scr_change_menu(profiles,0);
                        break;
                        
                    case EXIT:
                        game_end();
                        break;
                        
                    }
                break;
                
            case "Settings":
                switch(button_current)
                    {
                    case CONTROLS:
                        menu_current = "Controls";
                        scr_change_menu(controls,0);
                        description = "Press &lt;Enter&gt; to change key.";
                        break;
                        
                    case GAMEPLAY:
                        menu_current = "Gameplay";
                        scr_change_menu(gameplay,0);
                        break;
                        
                    case GRAPHICS:
                        menu_current = "Graphics";
                        scr_change_menu(graphics,0);
                        break;
                        
                    case AUDIO:
                        menu_current = "Audio";
                        scr_change_menu(audio,0);
                        break;
                        
                    case SET_BACK:
                        menu_current = "Main Menu";
                        scr_change_menu(main_menu,SETTINGS);
                        break;
                        
                    }
                break;
                
            case "Controls":
                switch(button_current)
                    {
                    case controlkeys.cont_default:
                        scr_control_defaults();
                        description = "Default control settings applied.";
                        alarm[0] = 120;
                        break;
                        
                    case controlkeys.back:
                        if control_check
                            {
                            description = "Cannot be empty keys!";
                            alarm[0] = 120;
                            break;
                            }
                        menu_current = "Settings";
                        scr_change_menu(settings,0);
                        description = "";
                        break;
                        
                    default:
                        control_change = true;
                        description = "Press any key to assign, press &lt;ESC&gt; to cancel. Some keys are not allowed.";
                    }
                break;
                
            case "Gameplay":
                switch(button_current)
                    {
                    case GAMEP_BACK:
                        menu_current = "Settings";
                        scr_change_menu(settings,1);
                        break;
                    }
                break;
                
            case "Graphics":
                switch(button_current)
                    {
                    case GRAP_BACK:
                        menu_current = "Settings";
                        scr_change_menu(settings,2);
                        break;
                    }
                break;
                
            case "Audio":
                switch(button_current)
                    {
                    case MASTER_VOLUME:
                        scr_audio_toggle("Master");
                        break;
                        
                    case MUSIC_VOLUME:
                        scr_audio_toggle("Music");
                        break;
                        
                    case SOUNDS_VOLUME:
                        scr_audio_toggle("Sounds");
                        break;
                        
                    case AUDIO_BACK:
                        menu_current = "Settings";
                        scr_change_menu(settings,3);
                        break;
                    }
                break;
                
            case "Profiles":
                switch(button_current)
                    {
                    case CREATE_PROFILE:
                        description = "Please enter a profile name. You can only use letters and numbers. #Press &lt;Enter&gt; to create. Press &lt;ESC&gt; to cancel. ";
                        new_profile = "";
                        keyboard_string = new_profile;
                        menu_current = "New Profile";
                        break;
                        
                    case DELETE_PROFILE:
                        menu_current = "Delete Profile";
                        scr_change_menu(delete_profile,0);
                        break;
                        
                    case PROFILES_BACK:
                        menu_current = "Main Menu";
                        scr_change_menu(main_menu,3);
                        break;
                    }
                break;
                
            case "Delete Profile":
                switch(button_current)
                    {
                    case DELETE_IT:
                        ini_open("profiles.ini");
                        current_profile_number = ini_read_real("Profiles","Current Number",0);
                        file_delete(current_profile + "_config.ini");
                        file_delete(current_profile + ".ini");
                        for(var j = current_profile_number; j &lt; total-1; j++)
                            {
                            ini_write_string("Profiles",j,ini_read_string("Profiles",j+1,""));
                            }
                        ini_key_delete("Profiles",total-1);
                        if current_profile_number = total-1 then current_profile_number--;
                        ini_write_real("Profiles","Current Number",current_profile_number);
                        ini_write_real("Profiles","Total",--total);
                        ini_close();
                        if total = 0
                            {
                            file_delete("profiles.ini");
                            description = "Please enter a profile name. You can only use letters and numbers. #Press &lt;Enter&gt; to create. Press &lt;ESC&gt; to return to desktop. ";
                            new_profile = "";
                            keyboard_string = new_profile;
                            menu_current = "New Profile";
                            }
                        else
                            {
                            scr_profile_load();
                            scr_profile_names();
                            menu_current = "Profiles";
                            scr_change_menu(profiles,2);
                            delete_profile[0] = "YES, DELETE THIS PROFILE: " + current_profile;
                            }
                        break;
                        
                    case CANCEL_IT:
                        menu_current = "Profiles";
                        scr_change_menu(profiles,2);
                        break;
                    }
                break;
            }
        exit;
        }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Escape

{
    if keyboard_check_pressed(vk_escape)
        {
        switch(menu_current)
            {
            case "New Profile":
                if total = 0 then game_end(); //Esc'ye basılırsa oyunu kapat
                else 
                    {
                    description = "";
                    menu_current = "Profiles";
                    scr_change_menu(profiles,1);
                    }
                break;
                
            case "Settings":
                menu_current = "Main Menu";
                scr_change_menu(main_menu,SETTINGS);
                break;
                
            case "Controls":
                if control_check
                    {
                    description = "Cannot be empty keys!";
                    alarm[0] = 120;
                    break;
                    }
                menu_current = "Settings";
                scr_change_menu(main_menu,CONTROLS);
                break;
                
            case "Gameplay":
                menu_current = "Settings";
                scr_change_menu(main_menu,GAMEPLAY);
                break;
                
            case "Graphics":
                menu_current = "Settings";
                scr_change_menu(main_menu,GRAPHICS);
                break;
                
            case "Audio":
                menu_current = "Settings";
                scr_change_menu(main_menu,AUDIO);
                break;
                
            case "Profiles":
                menu_current = "Main Menu";
                scr_change_menu(main_menu,PROFILES);
                break;
                
            case "Delete Profile":
                menu_current = "Profiles";
                scr_change_menu(profiles,DELETE_PROFILE);
                break;
            }
        exit;
        }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Global Controls

{
    scr_control_globals(true);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Game Start

{
    if on_startup_current = STARTUP_CONT
        {
        room_goto_next();
        exit;
        }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Menus &amp; Description

{
    draw_set_font(font);
    draw_set_halign(fa_center);
    draw_set_valign(fa_center);
    draw_set_colour(c_white);
    
    switch(menu_current)
        {
        case "Main Menu":
            scr_draw_menu(main_menu);
            break;
        
        case "Settings":
            scr_draw_menu(settings);
            break;
        
        case "Profiles":
            scr_draw_menu(profiles);
            break;
        
        case "Controls":
            scr_draw_menu(controls);
            break;
        
        case "Gameplay":
            scr_draw_menu(gameplay);
            break;
        
        case "Graphics":
            scr_draw_menu(graphics);
            break;
        
        case "Audio":
            scr_draw_menu(audio);
            break;
            
        case "New Profile":
            draw_text(room_width/2,176,"CREATE A NEW PROFILE: " + new_profile);
            break;
            
        case "Delete Profile":
            scr_draw_menu(delete_profile);
            break;
        
        }
        
    if description != ""
        {
        scr_draw_description(description);
        }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Menu Background

{
    draw_sprite(spr_MenuBackground,-1,0,0);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
