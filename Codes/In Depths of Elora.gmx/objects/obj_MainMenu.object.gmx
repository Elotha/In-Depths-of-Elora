<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_MenuBackground</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>1</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Create

{
    if obj_GameStart.GameStart { //Oyun yeni başlamışsa
        obj_GameStart.GameStart = false;
        Status = "Game Start"; //Menü objesindeki durum
        global.BackForSettings = false; //Odaya settings için mi dönüldü?
        }
    else if global.BackForSettings {
         Status = "Back For Settings";
         }
    else Status = "Main Menu";
    
    //Oyun yeni başladıysa
    if Status = "Game Start" {
        enum EnumMainMenu {
            StartGame,
            Settings,
            Journal,
            Profiles,
            Exit
            }
            
        enum EnumSettings {
            Controls,
            Gameplay,
            Graphics,
            Audio,
            Back
            }
            
        enum EnumProfiles {
            Current,
            Create,
            Delete,
            Back
            }
        
        enum ControlKeys {
            Left,
            Right,
            Up,
            Down,
            Jump,
            Dash,
            MagicalSight,
            ManaPotion,
            CameraUp,
            CameraDown,
            Interact,
            Journal,
            HUD,
            Music,
            Sounds,
            Defaults,
            Back
            }
            
        enum EnumGameplay {
            HUD,
            OnStartup,
            DashPreset,
            DialogSpeed,
            Language,
            SpeedRunTimer,
            Back
            }
        
        enum EnumGraphics {
            VSync,
            Fullscreen,
            Resolution,
            Quality,
            Back
            }
            
        enum EnumAudio {
            Master,
            Music,
            Sounds,
            Back
            }
            
        enum EnumPause {
            Resume,
            Settings,
            MainMenu
            }
            
        globalvar FontMenu, FontString, CurrentProfile, SoundsList;
        FontMenu = font_add_sprite_ext(spr_MainMenuFont,'ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789:-.,%/&lt;&gt;$!+*"',true,2);
        FontString[0] = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789:-.,%/&lt;&gt;+*"';
        FontString[1] = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789';
    
        global.FrameRate = 1/6; //Genel animasyon hızı
        
        QuickStart = false; //On Startup: Continue durumu için
    
        global.CurrentMusic = snd_MainMenu;
        SoundsList = ds_list_create();
        }
        
    //Settings için dönülmedi
    if Status != "Back For Settings" { 
        
        MainMenu[EnumMainMenu.StartGame] = "START GAME";
        MainMenu[EnumMainMenu.Settings] = "SETTINGS";
        MainMenu[EnumMainMenu.Journal] = "JOURNAL";
        MainMenu[EnumMainMenu.Profiles] = "PROFILES";
        MainMenu[EnumMainMenu.Exit] = "EXIT";
        
        StartAlpha = true;
        Alpha = 0;
        }
        
    else { //Back For Settings durumu
        scr_InGameSystemObjects("Suspend"); //Gereksiz objeleri deaktive et
        StartAlpha = false;
        Alpha = 1;
        scr_ControlGlobals(false); //Kontrolleri çek
        }
        
    if Status = "Main Menu" then scr_InGameSystemObjects("Destroy"); //Menüye tamamen dönmüşsek objeleri yok et
    
        
    Font = FontMenu; //Local değişken kullanmak için
    image_speed = 1/5;
    display_set_gui_size(view_wport[0]/3,view_hport[0]/3);
    StartGame = false;
    draw_set_alpha(Alpha);
    
    QuickStart = false;
    
    Selected[0] = 0.5;
    for(var i = 1; i &lt; 12; i++) {
        Selected[i] = 0;
        }
    SelectedTotal = 5;
    SelectedNumber = 0;
    
    ShowFirst = "";
    ShowLast = "";
    Offset = 0;
    
    Settings[EnumSettings.Controls] = "CONTROLS";
    Settings[EnumSettings.Gameplay] = "GAMEPLAY";
    Settings[EnumSettings.Graphics] = "GRAPHICS";
    Settings[EnumSettings.Audio] = "AUDIO";
    Settings[EnumSettings.Back] = "BACK";
    
    ControlChange = false; //Herhangi bir kontrol değiştiriliyor mu?
    ControlCheck = false; //Atanmamış tuş var mı?
    
    OnStartup[STARTUP_MENU] = "MENU";
    OnStartup[STARTUP_CONT] = "CONTINUE";
    
    HUD[ALWAYS_SHOW] = "ALWAYS SHOW";
    HUD[ONLY_INTERACT] = "ONLY WHEN INTERACT";
    HUD[ONLY_HUDKEY] = "ONLY WHEN HOLD THE HUD KEY";
    HUD[HUD_NEVER] = "NEVER";
    
    DashPreset[DASHKEY] = "USE DASH KEY";
    DashPreset[PRESSTWICE] = "PRESS LEFT OR RIGHT TWICE";
    DashPreset[DASHBOTH] = "BOTH";
    
    DialogSpeed[SPEED1] = "1";
    DialogSpeed[SPEED2] = "2";
    DialogSpeed[SPEED4] = "4";
    DialogSpeed[IMMIDIATE] = "IMMIDIATE";
    
    Language[ENGLISH] = "ENGLISH";
    Language[TURKISH] = "TURKISH";
    
    SpeedRunTimer[OFF] = "OFF";
    SpeedRunTimer[ON] = "ON";
    
    VSync[ON] = "ON";
    VSync[OFF] = "OFF";
    
    Fullscreen[ON] = "ON";
    Fullscreen[OFF] = "OFF";
    
    Resolution[R1920X1080] = "1920 X 1080";
    Resolution[R1600X900] = "1600 X 900";
    
    GraphicsQuality[QUALITY_HIGH] = "HIGH";
    GraphicsQuality[QUALITY_LOW] = "LOW";
    
    global.VSync = ON;
    MenuCreated = true;
    if !scr_ProfileLoad() { //Önceden oluşturulmuş bir profil varsa yükle, yoksa aşağıdaki kodları çalıştır
        global.Music = true;
        global.Sounds = true;
        global.MasterVolume = 10;
        global.MusicVolume = 10;
        global.SoundsVolume = 10;
        Description = "Please enter a profile name. You can only use letters and numbers. #Press &lt;Enter&gt; to create. Press &lt;ESC&gt; to return to desktop. ";
        NewProfile = "";
        keyboard_string = NewProfile;
        MenuCurrent = "New Profile";
        VSyncCurrent = ON;
        OnStartupCurrent = STARTUP_MENU;
        }
    else {
        if Status = "Back For Settings" then MenuCurrent = "Settings";
        else {
            MenuCurrent = "Main Menu";
            scr_ProfileNames();
            }
        }
    //display_reset(0,v_syncCurrent);
    ButtonCurrent = 0;
    
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Audio Groups

//alarm[1] otomatik olarak stepten kuruluyor

{
    if audio_group_is_loaded(InGame) {
        room_goto_next();
        if MenuCurrent != "New Profile" then scr_ControlGlobals(true);
        scr_InGameSystemObjects("Create");
        }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Description

{
    switch(MenuCurrent) {
        case "New Profile":
            if Total = 0 then Description = "Please enter a profile name. You can only use letters and numbers. #Press &lt;Enter&gt; to create. Press &lt;ESC&gt; to return to desktop. ";
            else Description = "Please enter a profile name. You can only use letters and numbers. #Press &lt;Enter&gt; to create. Press &lt;ESC&gt; to cancel. ";
            break;
        
        case "Controls":
            if Description = "Default control settings applied." then Description = "Press &lt;Enter&gt; to change key.";
            else Description = "Press any key to assign, press &lt;ESC&gt; to cancel. Some keys are not allowed.";
            break;   
        }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Start

{
    if StartGame { //Oyuna başlama tuşuna bastık
        if sprite_index = spr_MenuBackground &amp;&amp; (image_index &gt; 9 &amp;&amp; image_index &lt; 11) {
            sprite_index = spr_MenuBackground_StartGame;
            image_index = 0;
            image_speed = global.FrameRate;
            }
        if Alpha &gt; 0 then Alpha -= 0.05;
        else if alarm[1] = -1 then alarm[1] = 60; //Texture group load
        exit;
        }
        
    if StartAlpha { //Menü yeni açılıyorsa
        if Alpha &lt; 1 then Alpha += 0.025; else StartAlpha = false;
        }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Control Change

{
    if ControlChange {
        if keyboard_check_pressed(vk_escape) {
            ControlChange = false;
            Description = "Press &lt;Enter&gt; to change key.";
            }
        else if keyboard_check_pressed(vk_anykey) {
            if scr_ControlLoad(ButtonCurrent,false) {
                ControlChange = false;
                Description = "Press &lt;Enter&gt; to change key.";
                }
            }
        exit;
        }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Profile Name

{
    if MenuCurrent = "New Profile" {
        if keyboard_check_pressed(vk_backspace) {
            NewProfile = string_copy(NewProfile,1,string_length(NewProfile)-1);
            keyboard_string = NewProfile;
            }
        else if keyboard_check_pressed(vk_anykey) &amp;&amp; !keyboard_check_pressed(vk_enter) &amp;&amp; !keyboard_check_pressed(vk_escape) {
            if string_count(string_upper(keyboard_lastchar),FontString[1]) != 0 {
                NewProfile = string_copy(string_upper(keyboard_string),1,16);
                keyboard_string = NewProfile;
                }
            else keyboard_string = NewProfile;
            }
        }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Down and Up

{        
    if MenuCurrent != "New Profile" {
        var Dir = (keyboard_check_pressed(vk_down) || keyboard_check_pressed(ord('S'))) - (keyboard_check_pressed(vk_up) || keyboard_check_pressed(ord('W')));
        if Dir = -1 {
            if SelectedNumber = 0
                {
                Selected[0] = 0;
                Selected[SelectedTotal-1] = 0.5;
                SelectedNumber = SelectedTotal-1;
                ButtonCurrent = SelectedNumber;
                if SelectedTotal &gt; 5 {
                    Offset = SelectedTotal-5;
                    ShowFirst = "!";
                    ShowLast = "";
                    }
                }
            else {
                Selected[SelectedNumber--] = 0;
                Selected[SelectedNumber] = 0.5;
                ButtonCurrent = SelectedNumber;
                if SelectedTotal &gt; 5 {
                    if SelectedNumber &lt; SelectedTotal-5 then ShowLast = "$";
                    if Offset &gt; 0 &amp;&amp; SelectedNumber &lt; Offset then Offset--;
                    if Offset = 0 then ShowFirst = "";
                    }
                }
            }
        else if Dir = 1 {
            if SelectedNumber = SelectedTotal-1 {
                Selected[SelectedTotal-1] = 0;
                Selected[0] = 0.5;
                SelectedNumber = 0;
                ButtonCurrent = SelectedNumber;
                if SelectedTotal &gt; 5 {
                    ShowFirst = "";
                    ShowLast = "$";
                    Offset = 0;
                    }
                }
            else {
                Selected[SelectedNumber++] = 0;
                Selected[SelectedNumber] = 0.5;
                ButtonCurrent = SelectedNumber;
                if SelectedTotal &gt; 5 {
                    if SelectedNumber &gt;= 5 then ShowFirst = "!";
                    if SelectedNumber-Offset &gt; 4 &amp;&amp; Offset &lt; SelectedTotal-4 then Offset++;
                    if Offset = SelectedTotal-5 then ShowLast = "";
                    }
                }
            }
        if Dir != 0 exit;
        }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Left and Right

{
    var Left = keyboard_check_pressed(vk_left);
    var Right = keyboard_check_pressed(vk_right);
    Dirc = Right-Left;
    if keyboard_check_pressed(vk_enter) then Dirc = 1;
    if Dirc != 0 {
        switch(MenuCurrent) {
            case "Gameplay": 
                switch(ButtonCurrent) {
                    case EnumGameplay.HUD:
                        Gameplay[EnumGameplay.HUD] = scr_ChangeButton(Dirc,HUD,Gameplay[EnumGameplay.HUD],"HUD: ","Gameplay","HUD");
                        break;
                        
                    case EnumGameplay.DashPreset:
                        Gameplay[EnumGameplay.DashPreset] = scr_ChangeButton(Dirc,DashPreset,Gameplay[EnumGameplay.DashPreset],"DASH PRESET: ","Gameplay","Dash Preset");
                        break;
                        
                    case EnumGameplay.OnStartup:
                        Gameplay[EnumGameplay.OnStartup] = scr_ChangeButton(Dirc,OnStartup,Gameplay[EnumGameplay.OnStartup],"ON STARTUP: ","Gameplay","On Startup");
                        break;
                        
                    case EnumGameplay.DialogSpeed:
                        Gameplay[EnumGameplay.DialogSpeed] = scr_ChangeButton(Dirc,DialogSpeed,Gameplay[EnumGameplay.DialogSpeed],"DIALOG SPEED: ","Gameplay","Dialog Speed");
                        break;
                        
                    case EnumGameplay.Language:
                        Gameplay[EnumGameplay.Language] = scr_ChangeButton(Dirc,Language,Gameplay[EnumGameplay.Language],"LANGUAGE: ","Gameplay","Language");
                        break;
                        
                    case EnumGameplay.SpeedRunTimer:
                        Gameplay[EnumGameplay.SpeedRunTimer] = scr_ChangeButton(Dirc,SpeedRunTimer,Gameplay[EnumGameplay.SpeedRunTimer],"SPEED RUN TIMER: ","Gameplay","Speed Run Timer");
                        break;
                    }
                break;
                    
            case "Graphics": 
                switch(ButtonCurrent) {
                    case EnumGraphics.VSync:
                        Graphics[EnumGraphics.VSync] = scr_ChangeButton(Dirc,VSync,Graphics[EnumGraphics.VSync],"V-SYNC: ","Graphics","V-Sync");
                        ini_open(CurrentProfile + "_Config.ini");
                        display_reset(0,ini_read_real("Graphics","V-Sync",ON));
                        ini_close();
                        break;
                        
                    case EnumGraphics.Fullscreen:
                        Graphics[EnumGraphics.Fullscreen] = scr_ChangeButton(Dirc,Fullscreen,Graphics[EnumGraphics.Fullscreen],"FULLSCREEN: ","Graphics","Fullscreen");
                        ini_open(CurrentProfile + "_Config.ini");
                        window_set_fullscreen(ini_read_real("Graphics","Fullscreen","ON"));
                        ini_close();
                        break;
                        
                    case EnumGraphics.Resolution:
                        Graphics[EnumGraphics.Resolution] = scr_ChangeButton(Dirc,Resolution,Graphics[EnumGraphics.Resolution],"RESOLUTION: ","Graphics","Resolution");
                        break;
                        
                    case EnumGraphics.Quality:
                        Graphics[EnumGraphics.Quality] = scr_ChangeButton(Dirc,GraphicsQuality,Graphics[EnumGraphics.Quality],"GRAPHICS QUALITY: ","Graphics","Quality");
                        break;
                    }
                break;
                
            case "Audio":
                ini_open(CurrentProfile +"_Config.ini");
                if !keyboard_check_pressed(vk_enter) then switch(ButtonCurrent) {
                    case EnumAudio.Master:
                        if global.MasterVolume = 0 &amp;&amp; Dirc = 1 {
                            global.MasterVolume = 1;
                            scr_Music("Master");
                            }
                        else if global.MasterVolume = 1 &amp;&amp; Dirc = -1 {
                            global.MasterVolume = 0;
                            scr_Music("Master");
                            global.MasterVolumeLast = 10;
                            }
                        else {
                            global.MasterVolume = clamp(global.MasterVolume+(1*Dirc),0,10);    
                            scr_Volumes("Master");
                            }
                        ini_write_real("Audio","Master",global.MasterVolume);
                        break;
                        
                    case EnumAudio.Music:
                        if global.MusicVolume = 0 &amp;&amp; Dirc = 1 {
                            global.MusicVolume = 1;
                            scr_Music("Music");
                            }
                        else if global.MusicVolume = 1 &amp;&amp; Dirc = -1 {
                            global.MusicVolume = 0;
                            scr_Music("Music");
                            global.MusicVolumeLast = 10;
                            }
                        else {
                            global.MusicVolume = clamp(global.MusicVolume+(1*Dirc),0,10);
                            scr_Volumes("Music");
                            }
                        ini_write_real("Audio","Music",global.MusicVolume);
                        break;
                        
                    case EnumAudio.Sounds:
                        if global.SoundsVolume = 1 &amp;&amp; Dirc = -1  {
                            global.SoundsVolume = 0
                            global.MusicVolumeLast = 10;
                            }
                        else global.SoundsVolume = clamp(global.SoundsVolume+(1*Dirc),0,10);
                        ini_write_real("Audio","Sounds",global.SoundsVolume);
                        scr_Volumes("Sounds");
                        break;
                        
                    }
                ini_close();
                break;
            
            case "Profiles":
                switch(ButtonCurrent) {
                    case EnumProfiles.Current:
                        if Total &gt; 1 {
                            Profiles[EnumProfiles.Current] = scr_ChangeButton(Dirc,Profile,Profiles[EnumProfiles.Current],"CURRENT PROFILE: ","Profiles","Current Number");
                            scr_ProfileLoad();
                            DeleteProfile[0] = "YES, DELETE THIS PROFILE: " + string_upper(CurrentProfile);
                            break;
                            }
                    }
                break;
            }
        if !keyboard_check_pressed(vk_enter) then exit;
        }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Enter

{
    if keyboard_check_pressed(vk_enter) { //Enter'a Basılırsa
        switch(MenuCurrent) {
            case "New Profile":
                if NewProfile != "" then scr_ProfileNew();
                break;
                
            case "Main Menu":
                switch(ButtonCurrent) {
                    case EnumMainMenu.StartGame:
                        StartGame = true;
                        if !audio_group_is_loaded(InGame) then audio_group_load(InGame);
                        if sprite_index = spr_MenuBackground {
                            if image_index &gt; 10 then image_speed = -image_speed;
                            else if image_index = 10 {
                                sprite_index = spr_MenuBackground_StartGame;
                                image_index = 0;
                                }
                            }
                        with(obj_MenuHeadParent) alarm[1] = 1;
                        break;
                        
                    case EnumMainMenu.Settings:
                        MenuCurrent = "Settings";
                        scr_ChangeMenu(Settings,0);
                        break;
                        
                    case EnumMainMenu.Journal:
                        break;
                        
                    case EnumMainMenu.Profiles:
                        MenuCurrent = "Profiles";
                        scr_ChangeMenu(Profiles,0);
                        break;
                        
                    case EnumMainMenu.Exit:
                        game_end();
                        break;
                        
                    }
                break;
                
            case "Settings":
                switch(ButtonCurrent) { 
                    case EnumSettings.Controls:
                        MenuCurrent = "Controls";
                        scr_ChangeMenu(Controls,0);
                        Description = "Press &lt;Enter&gt; to change key.";
                        break;
                        
                    case EnumSettings.Gameplay:
                        MenuCurrent = "Gameplay";
                        scr_ChangeMenu(Gameplay,0);
                        break;
                        
                    case EnumSettings.Graphics:
                        MenuCurrent = "Graphics";
                        scr_ChangeMenu(Graphics,0);
                        break;
                        
                    case EnumSettings.Audio:
                        MenuCurrent = "Audio";
                        scr_ChangeMenu(Audio,0);
                        break;
                        
                    case EnumSettings.Back:
                        if Status != "Back For Settings" {
                            MenuCurrent = "Main Menu";
                            scr_ChangeMenu(MainMenu,EnumMainMenu.Settings);
                            }
                        else {
                            room_goto(global.PersistentRoom);
                            exit;
                            }
                        break;
                        
                    }
                break;
                
            case "Controls":
                switch(ButtonCurrent) {
                    case ControlKeys.Defaults:
                        scr_ControlDefaults();
                        scr_ControlStrings();
                        Description = "Default control Settings applied.";
                        alarm[0] = 120;
                        break;
                        
                    case ControlKeys.Back:
                        if ControlCheck {
                            Description = "Cannot be empty keys!";
                            alarm[0] = 120;
                            break;
                            }
                        MenuCurrent = "Settings";
                        scr_ChangeMenu(Settings,EnumSettings.Controls);
                        Description = "";
                        break;
                        
                    default:
                        ControlChange = true;
                        Description = "Press any key to assign, press &lt;ESC&gt; to cancel. Some keys are not allowed.";
                    }
                break;
                
            case "Gameplay":
                switch(ButtonCurrent) {
                    case EnumGameplay.Back:
                        MenuCurrent = "Settings";
                        scr_ChangeMenu(Settings,EnumSettings.Gameplay);
                        break;
                    }
                break;
                
            case "Graphics":
                switch(ButtonCurrent) {
                    case EnumGraphics.Back:
                        MenuCurrent = "Settings";
                        scr_ChangeMenu(Settings,EnumSettings.Graphics);
                        break;
                    }
                break;
                
            case "Audio":
                switch(ButtonCurrent) {
                    case EnumAudio.Master:
                        scr_AudioToggle("Master");
                        break;
                        
                    case EnumAudio.Music:
                        scr_AudioToggle("Music");
                        break;
                        
                    case EnumAudio.Sounds:
                        scr_AudioToggle("Sounds");
                        break;
                        
                    case EnumAudio.Back:
                        MenuCurrent = "Settings";
                        scr_ChangeMenu(Settings,EnumSettings.Audio);
                        break;
                    }
                break;
                
            case "Profiles":
                switch(ButtonCurrent) {
                    case EnumProfiles.Create:
                        Description = "Please enter a profile name. You can only use letters and numbers. #Press &lt;Enter&gt; to create. Press &lt;ESC&gt; to cancel. ";
                        NewProfile = "";
                        keyboard_string = NewProfile;
                        MenuCurrent = "New Profile";
                        break;
                        
                    case EnumProfiles.Delete:
                        MenuCurrent = "Delete Profile";
                        scr_ChangeMenu(DeleteProfile,0);
                        break;
                        
                    case EnumProfiles.Back:
                        MenuCurrent = "Main Menu";
                        scr_ChangeMenu(MainMenu,EnumMainMenu.Profiles);
                        break;
                    }
                break;
                
            case "Delete Profile":
                switch(ButtonCurrent) {
                    case DELETE_IT:
                        ini_open("Profiles.ini");
                        CurrentProfileNumber = ini_read_real("Profiles","Current Number",0);
                        file_delete(CurrentProfile + "_Config.ini");
                        file_delete(CurrentProfile + ".ini");
                        for(var j = CurrentProfileNumber; j &lt; Total-1; j++) {
                            ini_write_string("Profiles",j,ini_read_string("Profiles",j+1,""));
                            }
                        ini_key_delete("Profiles",Total-1);
                        if CurrentProfileNumber = Total-1 then CurrentProfileNumber--;
                        ini_write_real("Profiles","Current Number",CurrentProfileNumber);
                        ini_write_real("Profiles","Total",--Total);
                        ini_close();
                        if Total = 0 {
                            file_delete("Profiles.ini");
                            Description = "Please enter a profile name. You can only use letters and numbers. #Press &lt;Enter&gt; to create. Press &lt;ESC&gt; to return to desktop. ";
                            NewProfile = "";
                            keyboard_string = NewProfile;
                            MenuCurrent = "New Profile";
                            }
                        else {
                            scr_ProfileLoad();
                            scr_ProfileNames();
                            MenuCurrent = "Profiles";
                            scr_ChangeMenu(Profiles,EnumProfiles.Delete);
                            DeleteProfile[0] = "YES, DELETE THIS PROFILE: " + string_upper(CurrentProfile);
                            }
                        break;
                        
                    case CANCEL_IT:
                        MenuCurrent = "Profiles";
                        scr_ChangeMenu(Profiles,EnumProfiles.Delete);
                        break;
                    }
                break;
            }
        exit;
        }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Escape

{
    if keyboard_check_pressed(vk_escape) {
        switch(MenuCurrent) {
            case "New Profile":
                if Total = 0 then game_end(); //Esc'ye basılırsa oyunu kapat
                else  {
                    Description = "";
                    MenuCurrent = "Profiles";
                    scr_ChangeMenu(Profiles,EnumProfiles.Create);
                    }
                break;
                
            case "Settings":
                if Status != "Back For Settings" {
                    MenuCurrent = "Main Menu";
                    scr_ChangeMenu(MainMenu,EnumMainMenu.Settings);
                    }
                else {
                    room_goto(global.PersistentRoom);
                    exit;
                    }
                break;
                
            case "Controls":
                if ControlCheck {
                    Description = "Cannot be empty keys!";
                    alarm[0] = 120;
                    break;
                    }
                MenuCurrent = "Settings";
                scr_ChangeMenu(Settings,EnumSettings.Controls);
                break;
                
            case "Gameplay":
                MenuCurrent = "Settings";
                scr_ChangeMenu(Settings,EnumSettings.Gameplay);
                break;
                
            case "Graphics":
                MenuCurrent = "Settings";
                scr_ChangeMenu(Settings,EnumSettings.Graphics);
                break;
                
            case "Audio":
                MenuCurrent = "Settings";
                scr_ChangeMenu(Settings,EnumSettings.Audio);
                break;
                
            case "Profiles":
                MenuCurrent = "Main Menu";
                scr_ChangeMenu(MainMenu,EnumMainMenu.Profiles);
                break;
                
            case "Delete Profile":
                MenuCurrent = "Profiles";
                scr_ChangeMenu(Profiles,EnumProfiles.Delete);
                break;
            }
        exit;
        }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Global Controls &amp;&amp; Back For Settings

{
    if global.BackForSettings {
        scr_InGameSystemObjects("Reactivate");
        scr_ControlGlobals(true);
        }
    
    obj_Audio.MusicKey = Control[ControlKeys.Music];
    obj_Audio.SoundsKey = Control[ControlKeys.Sounds];
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Music

{
    if !StartGame then scr_Music("Music");
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///On Startup: Continue

{
    with(obj_MenuHeadParent) image_alpha = 0;
    if OnStartupCurrent = STARTUP_CONT {
        QuickStart = true;
        StartGame = true;
        StartAlpha = false;
        Alpha = 1;
        draw_set_alpha(Alpha);
        if !audio_group_is_loaded(InGame) then audio_group_load(InGame);
        if sprite_index = spr_MenuBackground {
            if image_index &gt; 10 then image_speed = -image_speed;
            else if image_index = 10 {
                sprite_index = spr_MenuBackground_StartGame;
                image_index = 0;
                }
            }
        }
    else {
        with(obj_MenuHeadParent) alarm[2] = 1;
        }     
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Menus &amp; Description

{
    draw_set_font(Font);
    draw_set_halign(fa_center);
    draw_set_valign(fa_center);
    draw_set_colour(c_white);
    
        
    if StartGame { //Start Game tuşuna bastıysak
        draw_text_colour(room_width/2+5,room_height-64,"LOADING...",c_white,c_white,c_white,c_white,1-Alpha);
        if QuickStart then exit;
        }
    
    switch(MenuCurrent) {
        case "Main Menu":
            scr_DrawMenu(MainMenu);
            break;
        
        case "Settings":
            scr_DrawMenu(Settings);
            break;
        
        case "Profiles":
            scr_DrawMenu(Profiles);
            break;
        
        case "Controls":
            scr_DrawMenu(Controls);
            break;
        
        case "Gameplay":
            scr_DrawMenu(Gameplay);
            break;
        
        case "Graphics":
            scr_DrawMenu(Graphics);
            break;
        
        case "Audio":
            scr_DrawMenu(Audio);
            break;
            
        case "New Profile":
            draw_set_alpha(Alpha);
            draw_text(room_width/2,176,"CREATE A NEW PROFILE: " + NewProfile);
            break;
            
        case "Delete Profile":
            scr_DrawMenu(DeleteProfile);
            break;
        
        }
        
    if Description != "" {
        scr_DrawDescription(Description);
        }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
