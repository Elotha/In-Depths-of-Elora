<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>1</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Create

{
    globalvar fnt_menu;
    fnt_menu = font_add_sprite_ext(spr_MainMenuFont,"ABCDEFGHIJKLMNOPRSTUVXYZ0123456789",true,2);
    font = fnt_menu;
    
    image_speed = 1/5;
    display_set_gui_size(view_wport[0]/3,view_hport[0]/3);
    start_game = false;
    alpha = 1;
    
    main_menu[STARTGAME] = "START GAME";
    main_menu[SETTINGS] = "SETTINGS";
    main_menu[JOURNAL] = "JOURNAL";
    main_menu[PROFILES] = "PROFILES";
    main_menu[EXIT] = "EXIT";
    
    settings[CONTROLS] = "CONTROLS";
    settings[GAMEPLAY] = "GAMEPLAY";
    settings[GRAPHICS] = "GRAPHICS";
    settings[AUDIO] = "AUDIO";
    settings[SET_BACK] = "BACK";
    
    controls[MENU_LEFT] = "LEFT";
    controls[MENU_RIGHT] = "RIGHT";
    controls[JUMP] = "JUMP";
    controls[CAMERAUP] = "CAMERA UP";
    controls[CAMERADOWN] = "CAMERA DOWN";
    controls[MENU_INTERACT] = "INTERACT";
    controls[CONT_JOURNAL] = "JOURNAL";
    controls[PAUSEMENU] = "PAUSE MENU";
    controls[CONT_BACK] = "BACK";
    
    hud = "ALWAYS SHOW";
    on_startup = "MENU";
    dialog_speed = 2;
    language = "ENGLISH";
    speedrun_timer = "OFF";
    
    global.hud = hud;
    global.on_startup = on_startup;
    global.dialog_speed = dialog_speed;
    global.language = language;
    global.speedrun_timer = speedrun_timer;
    
    gameplay[HUD] = "HUD: " + hud;
    gameplay[ONSTARTUP] = "ON STARTUP: " + on_startup;
    gameplay[DIALOGSPEED] = "DIALOG SPEED: " + string(dialog_speed);
    gameplay[LANGUAGE] = "LANGUAGE: " + language;
    gameplay[SPEEDRUN] = "SPEEDRUN TIMER: " + speedrun_timer;
    gameplay[GAMEP_BACK] = "BACK";
    
    fullscreen = "ON";
    resolution_x = "1920";
    resolution_y = "1080";
    graphics_quality = "HIGH";
    
    global.fullscreen = "ON";
    global.resolution_x = "1920";
    global.resolution_y = "1080";
    global.graphics_quality = "HIGH";
    
    graphics[V_SYNC] = "V-SYNC: ";
    graphics[FULSCREEN] = "FULLSCREEN: ";
    graphics[RESOLUTION] = "RESOLUTION: ";
    graphics[QUALITY] = "GRAPHICS QUALITY: ";
    graphics[GRAP_BACK] = "BACK";
    
    master_volume = 10;
    music_volume = 10;
    sounds_volume = 10;
    voices_volume = 10;
    
    global.master_volume = 10;
    global.music_volume = 10;
    global.sounds_volume = 10;
    global.voices_volume = 10;
    
    audio[MASTER_VOLUME] = "MASTER VOLUME: ";
    audio[MUSIC_VOLUME] = "MUSIC VOLUME: ";
    audio[SOUNDS_VOLUME] = "SOUND EFFECTS VOLUME: ";
    audio[VOICES_VOLUME] = "VOICES VOLUME: ";
    audio[AUDIO_BACK] = "BACK";
    
    
    menu_current = "Main Menu";
    
    selected[0] = 0.5;
    for(var i = 1; i &lt; 12; i++)
        {
        selected[i] = 0;
        }
    selected_total = 5;
    selected_number = 0;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Step

{
    if start_game
        {
        if alpha &gt; 0 then alpha -= 0.05;
        else room_goto_next();
        exit;
        }
        
    var dir = (keyboard_check_pressed(vk_down) || keyboard_check_pressed(ord('S'))) - (keyboard_check_pressed(vk_up) || keyboard_check_pressed(ord('W')));
    if dir = -1
        {
        if selected_number = 0
            {
            selected[0] = 0;
            selected[selected_total-1] = 0.5;
            selected_number = selected_total-1;
            button_current = selected_number;
            }
        else
            {
            selected[selected_number--] = 0;
            selected[selected_number] = 0.5;
            button_current = selected_number;
            }
        }
    else if dir = 1
        {
        if selected_number = selected_total-1
            {
            selected[selected_total-1] = 0;
            selected[0] = 0.5;
            selected_number = 0;
            button_current = selected_number;
            }
        else
            {
            selected[selected_number++] = 0;
            selected[selected_number] = 0.5;
            button_current = selected_number;
            }
        }
    if keyboard_check_pressed(vk_enter)
        {
        switch(menu_current)
            {
            case "Main Menu":
                switch(button_current)
                    {
                    case STARTGAME:
                        start_game = true;
                        break;
                        
                    case SETTINGS:
                        menu_current = "Settings";
                        scr_change_menu(settings);
                        break;
                        
                    case JOURNAL:
                        break;
                        
                    case PROFILES:
                        break;
                        
                    case EXIT:
                        game_end();
                        break;
                        
                    }
                break;
                
            case "Settings":
                switch(button_current)
                    {
                    case CONTROLS:
                        menu_current = "Controls";
                        scr_change_menu(controls);
                        break;
                        
                    case GAMEPLAY:
                        menu_current = "Gameplay";
                        scr_change_menu(gameplay);
                        break;
                        
                    case GRAPHICS:
                        menu_current = "Graphics";
                        scr_change_menu(graphics);
                        break;
                        
                    case AUDIO:
                        menu_current = "Audio";
                        scr_change_menu(audio);
                        break;
                        
                    case SET_BACK:
                        menu_current = "Main Menu";
                        scr_change_menu(main_menu);
                        break;
                        
                    }
                break;
                
            case "Controls":
                switch(button_current)
                    {
                    case CONT_BACK:
                        menu_current = "Main Menu";
                        scr_change_menu(main_menu);
                        break;
                    }
                
            case "Gameplay":
                switch(button_current)
                    {
                    case GAMEP_BACK:
                        menu_current = "Main Menu";
                        scr_change_menu(main_menu);
                        break;
                    }
                
            case "Graphics":
                switch(button_current)
                    {
                    case GRAP_BACK:
                        menu_current = "Main Menu";
                        scr_change_menu(main_menu);
                        break;
                    }
                
            case "Audio":
                switch(button_current)
                    {
                    case AUDIO_BACK:
                        menu_current = "Main Menu";
                        scr_change_menu(main_menu);
                        break;
                    }
            }
        }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Destroy Objects

{
    destroy(obj_HUD);
    destroy(obj_Score);
    destroy(obj_Lives);
    destroy(obj_Keys);
    destroy(obj_Camera);
    destroy(obj_Background);
    destroy(obj_System);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw GUI

{
    draw_set_font(font);
    draw_set_halign(fa_center);
    draw_set_valign(fa_center);
    
    switch(menu_current)
        {
        case "Main Menu":
            scr_draw_menu(main_menu);
            break;
        
        case "Settings":
            scr_draw_menu(settings);
            break;
        
        case "Controls":
            scr_draw_menu(controls);
            break;
        
        case "Gameplay":
            scr_draw_menu(gameplay);
            break;
        
        case "Graphics":
            scr_draw_menu(graphics);
            break;
        
        case "Audio":
            scr_draw_menu(main_menu);
            break;
        
        }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw

{
    draw_sprite(spr_MenuBackground,-1,0,0);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
