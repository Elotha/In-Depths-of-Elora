<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>0</visible>
  <depth>-100000</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Create

{
    editor_mode = true;
    global.immortality = false;
    global.draw = false; //Debug Draw modu
    global.old_mode = true;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Everything

{
    if keyboard_check_pressed(vk_f12) then game_end(); //Oyunu kapat
    if keyboard_check_pressed(vk_f5) //Oyunu yeniden başlat
        {
        scr_clear();
        audio_stop_all();
        game_restart();
        exit;
        }
    if keyboard_check_pressed(vk_f1) //Editör modunu aç-kapa
        {
        if keyboard_check(vk_control) then editor_mode = reverse(editor_mode);
        }
        
    if keyboard_check_pressed(vk_f11) //Screenshot
        {
        var i = 0;
        while file_exists("screenshot_" + string(i) + ".png") i++;
        screen_save("screenshot_" + string(i) + ".png");
        }
        
    if !editor_mode then exit; //Editör modu kapalıysa devam etme
    
    if keyboard_check_pressed(vk_shift) //Bölümü yeniden başlat
        {
        scr_clear();
        room_restart();
        exit;
        }
        
    if keyboard_check_pressed(vk_add) //Sonraki odaya git
        {
        if room_exists(room_next(room))
            {
            scr_clear();
            room_goto_next();
            exit;
            }
        }
    if keyboard_check_pressed(vk_subtract) //Önceki odaya git
        {
        if room_exists(room_previous(room))
            {
            scr_clear();
            room_goto_previous();
            exit;
            }
        }
    
    if keyboard_check_pressed(vk_f2) //Yaşlı modunu aç-kapa
        {
        global.old_mode = reverse(global.old_mode);
        with(obj_CharacterParent) old_mode = global.old_mode;
        with(obj_Camera) old_mode = global.old_mode;
        }
    
    if keyboard_check_pressed(vk_alt) //Oyunu yavaşlat ya da normal hızına getir
        {
        if room_speed = 60 then room_speed = 2; else room_speed = 60;
        }
        
    if keyboard_check_pressed(ord('Y')) //Anahtar kazan
        {
        with(obj_Keys) key_number++;
        }
        
     if keyboard_check_pressed(ord('X')) //Global draw modunu aç-kapa
        {
        global.draw = reverse(global.draw);
        with(obj_CharacterParent) draw = global.draw;
        with(obj_Monster) draw = global.draw;
        }
        
     if keyboard_check_pressed(ord('V')) //Blokları görünür-görünmez yap
        {
        with(obj_Block) visible = reverse(visible);
        }
        
     if keyboard_check_pressed(ord('P')) //Karakteri zorla doğdur - serbest doğdur
        {
        global.force_start = reverse(global.force_start);
        }
        
     if keyboard_check_pressed(ord('L')) //Hak sayısını arttır ve canı fulle
        {
        lives++;
        health = global.health_max;
        }
        
     if keyboard_check_pressed(ord('I')) //Ölümsüzlüğü aç-kapa
        {
        global.immortality = reverse(global.immortality);
        }
        
     if keyboard_check(ord('C')) //V-Sync
        {
        with(obj_System)
            {
            if v_sync = "ON" then v_sync = "OFF"; else v_sync = "ON";
            if v_sync = "ON" display_reset(0,true); else display_reset(0,false);
            }
        }
        
     if keyboard_check(ord('J')) //Canı azalt
        {
        health--;
        with (obj_Character) if health &lt;= 0
            {
            var death = instance_create(x,y,obj_CharacterDeath);
            death.image_xscale = image_xscale;
            lives--;
            instance_destroy();
            }
        }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
