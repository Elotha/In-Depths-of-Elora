<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-500</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Create

{
    RollDir = 1;
    cursor_sprite = spr_JournalMouse;
    TabCurrent = "Roll";
    
    JournalAlpha = 0;
    JournalDir = 1;
    LogoIndex = 0;
    FrameRate = global.FrameRate;
    TabsAlpha = 0;
    
    image_speed = 0;
    ww = display_get_gui_width();
    hh = display_get_gui_height();
    JournalKey = global.Control[ControlKeys.Journal];
    
    global.Focus = "Journal";
    obj_Character.Focus = global.Focus;

}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Destroy

{
    cursor_sprite = -1;
    //if room != rm_Journal {
        global.Focus = "Character";
        with(obj_Character) {
            Focus = global.Focus;
            MovementPermission = true;
            JumpPermission = true;
            }
        //}
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Journal Key

{
    if keyboard_check_pressed(JournalKey) scr_JournalClose();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="13">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Statistics

{
    StatisticsArrow[0] = instance_create(view_xview[0]+view_wview[0]/2-1,view_yview[0]+view_hview[0]/2-110+8,obj_JournalArrowBig); //Yukarı ok
    StatisticsArrow[1] = instance_create(view_xview[0]+view_wview[0]/2-1,view_yview[0]+view_hview[0]/2+110+24,obj_JournalArrowBig); //Aşağı ok
    with(StatisticsArrow[1])  {
        image_index = 1;
        image_angle = 180;
        }
        
    StatisticsOffset = 0;
    SprH = sprite_get_height(spr_JournalStatisticsFrames);
    enum Statistics {
        Hurts,
        Deaths,
        Steps,
        ProfileTime,
        GameTime,
        MagicEssences,
        Potions,
        Lives,
        }
    
    StatisticsQuestions[Statistics.Hurts] = "How many times did you hurt?";
    StatisticsQuestions[Statistics.Deaths] = "How many times did you die?";
    StatisticsQuestions[Statistics.Steps] = "How many steps did you take?";
    StatisticsQuestions[Statistics.ProfileTime] = "How long do you play in this profile?";
    StatisticsQuestions[Statistics.GameTime] = "How long do you play the game?";
    StatisticsQuestions[Statistics.MagicEssences] = "How many blue stones did you take?";
    StatisticsQuestions[Statistics.Potions] = "How many potions did you take?";
    StatisticsQuestions[Statistics.Lives] = "How many lives did you take?";
    
    StatisticsAnswers[Statistics.Hurts] = 0;
    StatisticsAnswers[Statistics.Deaths] = 1;
    StatisticsAnswers[Statistics.Steps] = 2;
    StatisticsAnswers[Statistics.ProfileTime] = 3;
    StatisticsAnswers[Statistics.GameTime] = 4;
    StatisticsAnswers[Statistics.MagicEssences] = 5;
    StatisticsAnswers[Statistics.Potions] = 6;
    StatisticsAnswers[Statistics.Lives] = 7;
    
    StatisticsIndex = 0;
    StatisticsMax = array_length_1d(StatisticsQuestions)-4;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="12">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Achievements

{
    //Değişkenler
    AchH = sprite_get_height(spr_JournalSquare);
    AchW = sprite_get_width(spr_JournalSquare);
    AchSep = 47; //Achievements kısmındaki girdilerin birbirine olan piksel uzaklığı
    AchievementNumber = 0; //Kaçıncı achievementtayız?
    AchievementsPage = 0; //Kaçıncı sayfadayız?
    AchievementsMax = 11; //Toplam achievement sayısı
    AchievementsPageMax = floor(AchievementsMax/16); //Maksimum sayfa sayısı kaç?
    
    //Achievement kareleri
    var q, w, Number;
    for(q = 0; q &lt; 4; q++) {
        for(w = 0; w &lt; 4; w++) {
            Number = q*4+w;
            Ach[Number] = instance_create(view_xview[0]+view_wview[0]/2-(2*AchSep)+(w*AchSep)+26,view_yview[0]+view_hview[0]/2-(2*AchSep)+(q*AchSep)+9,obj_JournalAchievementsSquare);
            Ach[Number].Number = Number;
            if Ach[Number].Number &gt;= AchievementsMax then with(Ach[Number]) sprite_index = -1;
            }
        }
        
    //Oklar
    AchievementsArrow[0] = instance_create(view_xview[0]+view_wview[0]/2+109,view_yview[0]+view_hview[0]/2-13,obj_JournalAchievementsArrow); //Sağdaki ok
    if AchievementsPageMax &gt; 0 then with(AchievementsArrow[0]) image_index = 1;
    AchievementsArrow[1] = instance_create(view_xview[0]+view_wview[0]/2-106,view_yview[0]+view_hview[0]/2-13,obj_JournalAchievementsArrow); //Soldaki ok
    with(AchievementsArrow[1]) image_xscale = -1;
        
    //Başarım listesi
    AchievementName[0] = "PALPUS DOMINATOR";
    AchievementDescription[0] = "Kill a palpus.";
    
    AchievementName[1] = "GREED OF POWER";
    AchievementDescription[1] = "Try to be a goddess.";
    
    for(var e = 2; e &lt; AchievementsMax; e++) {
        AchievementName[e] = "ACHIEVEMENT TITLE";
        AchievementDescription[e] = string(e);
        }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="11">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Last Dialogues

{        
    ///Değişkenler
    LastDialoguesSep = 16;
    LastDialoguesStr[0] = "S";
    LastDialoguesStr[1] = "S #S";
    LastDialoguesStr[2] = "S #S #S";
    LastDialoguesStr[3] = "S #S #S #S";
    LastDialoguesStr[4] = "S #S #S #S #S";
    
    LastDialoguesOffset = 0;
    
    
    //Oklar
    LastDialoguesArrow[0] = instance_create(view_xview[0]+view_wview[0]/2-1,view_yview[0]+view_hview[0]/2-110+8-6,obj_JournalArrowBig); //Yukarı ok
    LastDialoguesArrow[1] = instance_create(view_xview[0]+view_wview[0]/2-1,view_yview[0]+view_hview[0]/2+110+24-2,obj_JournalArrowBig); //Aşağı ok
    with(LastDialoguesArrow[1]) image_yscale = -1;
    
    //Last Dialogues
    /*for(var i = 0; i &lt; 10; i++)
    LastDialogues[i] = string(i) + " Wizard said, I am going to need this parchment. It was his #masterpiece and lifetime work. But he couldn't upload all the #data I need. He said I have to find pomegranate flower and #some stones that have magic essence."; 
    */
    
    LastDialogues[0] = "0 Wizard said, I am going to need this parchment. It was his #masterpiece and lifetime work. But he couldn't upload all the #data I need. He said I have to find pomegranate flower and #some stones that have magic essence."; 
    LastDialogues[1] = "1 Wizard said, I am going to need this parchment. It was his #masterpiece and lifetime work. But he couldn't upload all the #data I need.";    
    LastDialogues[2] = "2 Wizard said, I am going to need this parchment.";
    LastDialogues[3] = "3 Wizard said, I am going to need this parchment. It was his #masterpiece and lifetime work. But he couldn't upload all the #data I need. He said I have to find pomegranate flower and #some stones that have magic essence."; 
    LastDialogues[4] = "4 Wizard said, I am going to need this parchment. It was his #masterpiece and lifetime work. But he couldn't upload all the #data I need.";
    LastDialogues[5] = "5 Wizard said, I am going to need this parchment. It was his #masterpiece and lifetime work. But he couldn't upload all the #data I need. He said I have to find pomegranate flower and #some stones that have magic essence.";
    LastDialogues[6] = "6 Wizard said, I am going to need this parchment. It was his #masterpiece and lifetime work. But he couldn't upload all the #data I need. He said I have to find pomegranate flower and #some stones that have magic essence.";
    LastDialogues[7] = "7 Wizard said, I am going to need this parchment. It was his #masterpiece and lifetime work. But he couldn't upload all the #data I need. He said I have to find pomegranate flower and #some stones that have magic essence.";
    LastDialogues[8] = "8 Wizard said, I am going to need this parchment.";
    LastDialogues[9] = "9 Wizard said, I am going to need this parchment. It was his #masterpiece and lifetime work. But he couldn't upload all the #data I need. He said I have to find pomegranate flower and #some stones that have magic essence."; 
    
    //Update Dialogues
    scr_LastDialoguesUpdate(true);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Tabs

{
    var j = 0;
    for(var k = 0; k &lt; 4; k++) {
        MainTabs[k] = instance_create(view_xview[0]+view_wview[0]/2-120+j,view_yview[0]+view_hview[0]/2-152,obj_JournalTab);
        j += sprite_get_width(spr_JournalTab);
        }
    with(MainTabs[0]) Type = "Entries";
    with(MainTabs[1]) Type = "Last Dialogues";
    with(MainTabs[2]) Type = "Achievements";
    with(MainTabs[3]) Type = "Statistics";
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw GUI

{
    if sign(image_speed) != RollDir then image_speed = global.FrameRate*RollDir;
    display_set_gui_size(view_wport[0]/3,view_hport[0]/3);
    draw_sprite(spr_JournalPaper,image_index,view_wview[0]/2,view_hview[0]/2); //Paper
    if image_index = sprite_get_number(spr_JournalRoll)-1 &amp;&amp; RollDir = 1 {
        RollDir = 0;
        TabCurrent = "Start";
        event_user(0);
        }
    else if image_index = 0 &amp;&amp; RollDir = -1 then instance_destroy();
    
    if JournalDir = -1 then if JournalAlpha &gt; 0 then JournalAlpha = clamp(JournalAlpha-0.04,0,1); //Kapanma
    else {
        RollDir = -1;
        JournalDir = 0;
        }
    
    switch(TabCurrent) {
        case "Start":
            if JournalDir = 1 then if JournalAlpha &lt; 1 then JournalAlpha = clamp(JournalAlpha+0.04,0,1);
            draw_sprite_ext(spr_JournalLogo,floor(LogoIndex),view_wview[0]/2,view_hview[0]/2,1,1,0,c_white,JournalAlpha); //Logo
            LogoIndex = LogoIndex+FrameRate mod sprite_get_number(spr_JournalLogo);
            break;
            
        case "Last Dialogues":
            draw_sprite_ext(spr_JournalBigFrame,0,view_wview[0]/2,view_hview[0]/2+12,1,1,0,c_white,JournalAlpha); //Last dialogues tablosu
            draw_sprite_ext(spr_JournalArrowBig,LastDialoguesArrow[0].image_index,LastDialoguesArrow[0].x-view_xview[0],LastDialoguesArrow[0].y-view_yview[0],1,1,0,c_white,JournalAlpha); //Yukardaki ok
            draw_sprite_ext(spr_JournalArrowBig,LastDialoguesArrow[1].image_index,LastDialoguesArrow[1].x-view_xview[0],LastDialoguesArrow[1].y-view_yview[0],1,1,180,c_white,JournalAlpha); //Aşağıdaki ok
            
            scr_LastDialoguesDraw();
            break;
            
        case "Achievements":
            draw_sprite_ext(spr_JournalFrameAchievements,0,view_wview[0]/2,view_hview[0]/2+12,1,1,0,c_white,JournalAlpha); //Achievements tablosu
            for(var q = 0; q &lt; min(AchievementsMax,16); q++) {
                if Ach[q].sprite_index = -1 then continue;
                with(Ach[q]) draw_sprite_ext(sprite_index,image_index,x-view_xview[0],y-view_yview[0],1,1,0,c_white,other.JournalAlpha); //Achievement kareleri
                if q = AchievementNumber-(AchievementsPage*16) then with(Ach[q]) draw_sprite_ext(spr_JournalSquare,1,x-view_xview[0],y-view_yview[0],1,1,0,c_white,other.JournalAlpha); //Seçili kare
                }
            with(AchievementsArrow[0]) draw_sprite_ext(sprite_index,image_index,x-view_xview[0],y-view_yview[0],1,1,image_angle,c_white,other.JournalAlpha); //Sağdaki ok
            with(AchievementsArrow[1]) draw_sprite_ext(sprite_index,image_index,x-view_xview[0],y-view_yview[0],image_xscale,1,image_angle,c_white,other.JournalAlpha); //Soldaki ok
            display_set_gui_size(view_wport[0],view_hport[0]);
            draw_set_colour(c_black);
            draw_set_font(fnt_AchievementTitle);
            draw_text_colour(view_wport[0]/2-256,view_hport[0]/2+272,AchievementName[AchievementNumber],c_black,c_black,c_black,c_black,JournalAlpha); //Seçili başarımın ismi
            draw_set_font(fnt_AchievementDescription);
            draw_text_color(view_wport[0]/2-256,view_hport[0]/2+304,AchievementDescription[AchievementNumber],c_black,c_black,c_black,c_black,JournalAlpha);; //Seçili başarımın açıklaması
                
            break;
            
        case "Statistics":
            draw_sprite_ext(spr_JournalFrameScroll,0,view_wview[0]/2,view_hview[0]/2+16,1,1,0,c_white,JournalAlpha); //Dış hatlar
            draw_sprite_ext(spr_JournalStatisticsFrames,0,view_wview[0]/2,view_hview[0]/2-SprH*2+37-8,1,1,0,c_white,JournalAlpha); //Birinci istatistik
            draw_sprite_ext(spr_JournalStatisticsFrames,1,view_wview[0]/2,view_hview[0]/2-SprH+43-8,1,1,0,c_white,JournalAlpha); //İkinci istatistik
            draw_sprite_ext(spr_JournalStatisticsFrames,2,view_wview[0]/2,view_hview[0]/2+49-8,1,1,0,c_white,JournalAlpha); //Üçüncü istatistik
            draw_sprite_ext(spr_JournalStatisticsLastFrame,0,view_wview[0]/2,view_hview[0]/2+SprH+55-8,1,1,0,c_white,JournalAlpha); //Görünmeyen son istatistik
            draw_sprite_ext(spr_JournalArrowBig,StatisticsArrow[0].image_index,StatisticsArrow[0].x-view_xview[0],StatisticsArrow[0].y-view_yview[0],1,1,0,c_white,JournalAlpha); //Yukardaki ok
            draw_sprite_ext(spr_JournalArrowBig,StatisticsArrow[1].image_index,StatisticsArrow[1].x-view_xview[0],StatisticsArrow[1].y-view_yview[0],1,1,180,c_white,JournalAlpha); //Aşağıdaki ok
            
            display_set_gui_size(view_wport[0],view_hport[0]);
            
            draw_set_font(fnt_AchievementTitle);
            draw_text_colour(view_wport[0]/2-218,view_hport[0]/2+(-SprH*2+16)*3,"- " + StatisticsQuestions[StatisticsOffset],c_black,c_black,c_black,c_black,JournalAlpha);
            draw_set_font(fnt_AchievementDescription);
            draw_text_colour(view_wport[0]/2-218,view_hport[0]/2+(-SprH*2+32)*3,"   " + string(StatisticsAnswers[StatisticsOffset]),c_black,c_black,c_black,c_black,JournalAlpha);
            
            draw_set_font(fnt_AchievementTitle);
            draw_text_colour(view_wport[0]/2-218,view_hport[0]/2+(-SprH+22)*3,"- " + StatisticsQuestions[StatisticsOffset+1],c_black,c_black,c_black,c_black,JournalAlpha);
            draw_set_font(fnt_AchievementDescription);
            draw_text_colour(view_wport[0]/2-218,view_hport[0]/2+(-SprH+22+16)*3,"   " + string(StatisticsAnswers[StatisticsOffset+1]),c_black,c_black,c_black,c_black,JournalAlpha);
            
            draw_set_font(fnt_AchievementTitle);
            draw_text_colour(view_wport[0]/2-218,view_hport[0]/2+(28*3),"- " + StatisticsQuestions[StatisticsOffset+2],c_black,c_black,c_black,c_black,JournalAlpha);
            draw_set_font(fnt_AchievementDescription);
            draw_text_colour(view_wport[0]/2-218,view_hport[0]/2+(28+16)*3,"   " + string(StatisticsAnswers[StatisticsOffset+2]),c_black,c_black,c_black,c_black,JournalAlpha);
            
            if StatisticsOffset &lt; StatisticsMax {
                draw_set_font(fnt_AchievementTitle);
                draw_text_colour(view_wport[0]/2-218,view_hport[0]/2+(+SprH*2-8)*3,"- " + StatisticsQuestions[StatisticsOffset+3],c_black,c_black,c_black,c_black,JournalAlpha/2);
                draw_set_font(fnt_AchievementDescription);
                draw_text_colour(view_wport[0]/2-218,view_hport[0]/2+(+SprH*2-8+16)*3,"   " + string(StatisticsAnswers[StatisticsOffset+3]),c_black,c_black,c_black,c_black,JournalAlpha/2);
                }            
        }
    display_set_gui_size(view_wport[0]/3,view_hport[0]/3);
        
    if TabCurrent != "Roll" { //Tabs
        for(var h = 0; h &lt; 4; h++)  {
            draw_sprite_ext(spr_JournalTab,MainTabs[h].image_index,(MainTabs[h].x-view_xview[0]),(MainTabs[h].y-view_yview[0]),1,1,0,c_white,JournalAlpha);
            draw_sprite_ext(spr_JournalIcons,h,(MainTabs[h].x-view_xview[0])-2,(MainTabs[h].y-view_yview[0])+sign(MainTabs[h].image_index)*14-16,1,1,0,c_white,JournalAlpha);
            }
        }
    
    draw_sprite(spr_JournalRoll,image_index,view_wview[0]/2,view_hview[0]/2); //Roll
        
    display_set_gui_size(ww,hh);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
